@page "/"
@using One.Toast
@using One.Toast.Services
@inject NavigationManager NavigationManager
<PageTitle>Oubaich Toast</PageTitle>
<h1>Oubaich Toast</h1>
<div>
    <button class="btn btn-info" @onclick="@(() => ToastService.ShowInfo("I'm an INFO message"))">Info Toast</button>
    <button class="btn btn-success" @onclick="@(() => ToastService.ShowSuccess("I'm a SUCCESS message with a custom heading"))">Success Toast</button>
    <button class="btn btn-warning" @onclick="@(() => ToastService.ShowWarning("I'm a WARNING message"))">Warning Toast</button>
    <button class="btn btn-danger" @onclick="@(() => ToastService.ShowError("I'm an ERROR message"))">Error Toast</button>
    <button class="btn btn-info" @onclick="@OnShowHtml">Info Toast with HTML</button>
    <button class="btn btn-info" @onclick="@(() => ToastService.ShowInfo("Click to refresh the page", options => options.OnClick = () => NavigationManager.NavigateTo("/", true)))">
        Info Toast with custom action on click
    </button>
</div>
<div class="mt-2">
    <button class="btn btn-info" @onclick="@(() => ToastService.ShowInfo("When you hover over me, I will pause the timeout progress and resume it once you move away", settings => {settings.Timeout = 15; settings.PauseProgressOnHover = true; }))">Pause progress on hover</button>
    <button class="btn btn-success" @onclick="@(() => ToastService.ShowSuccess("When you hover over me, I will stop the timeout progress and close after an extended timeout of 1 second", settings => {settings.Timeout = 15; settings.PauseProgressOnHover = true; settings.ExtendedTimeout = 1;}))">Pause progress on hover with extended timeout</button>
</div>
<hr />
<h1> Individual Positioning</h1>
<button class="btn btn-secondary" @onclick="@(() => ShowIndividualPosition("Top Left",One.Toast.Configuration.ToastPosition.TopLeft))">Top Left</button>
<button class="btn btn-secondary" @onclick="@(() => ShowIndividualPosition("Top Right",One.Toast.Configuration.ToastPosition.TopRight))">Top Right</button>
<button class="btn btn-secondary" @onclick="@(() => ShowIndividualPosition("Top Center",One.Toast.Configuration.ToastPosition.TopCenter))">Top Center</button>
<button class="btn btn-secondary" @onclick="@(() => ShowIndividualPosition("Bottom Left",One.Toast.Configuration.ToastPosition.BottomLeft))">Bottom Left</button>
<button class="btn btn-secondary" @onclick="@(() => ShowIndividualPosition("Bottom Right",One.Toast.Configuration.ToastPosition.BottomRight))"> Bottom Right</button>
<button class="btn btn-secondary" @onclick="@(() => ShowIndividualPosition("Bottom Centert",One.Toast.Configuration.ToastPosition.BottomCenter))">Bottom Centert</button> 
<hr />
<h1> Custom Component</h1>
<button class="btn btn-primary" @onclick="@(() => ToastService.ShowToast<PersonalizedToastComponent>(settings => { settings.Timeout = 5; settings.ShowProgressBar = false;}))">Custom Toast</button>
<button class="btn btn-secondary" @onclick="@(() => ToastService.ShowToast<PersonalizedToastComponent>(_toastParameters, settings => { settings.Timeout = 5; settings.ShowProgressBar = false; }))">Custom Toast with parameters</button>
<hr />
<h1>Remove Toasts</h1>
<button class="btn btn-primary" @onclick="ClearAll">Clear All Toasts</button>
<button class="btn btn-warning" @onclick="ClearWarnings">Clear Warning Toasts</button>
<button class="btn btn-info" @onclick="ClearInfos">Clear Info Toasts</button>
<button class="btn btn-secondary" @onclick="ClearCustom">Clear Custom Toasts</button>
<hr />
<h1>Remove queued Toasts</h1>
<button class="btn btn-primary" @onclick="ClearQueue">Clear all queued Toasts</button>
<button class="btn btn-warning" @onclick="ClearQueueWarnings">Clear queued Warning Toasts</button>
<button class="btn btn-info" @onclick="ClearQueueInfos">Clear queued Info Toasts</button>
@code
{
    private ToastParameters _toastParameters = default!;

    protected override void OnInitialized()
    {
        _toastParameters = new ToastParameters();
        _toastParameters.Add(nameof(PersonalizedToastComponent.Title), "I'm a custom toast component with parameters OUBAICH");
        _toastParameters.Add(nameof(PersonalizedToastComponent.ToastParam), "I'm a parameter");
        _toastParameters.Add(nameof(PersonalizedToastComponent.Status), ToastLevel.Info);
    }
    void ShowIndividualPosition(string message, One.Toast.Configuration.ToastPosition position)
    {
        ToastParameters _IndividualtoastParameters = default!;
        _IndividualtoastParameters = new();
        _IndividualtoastParameters.Add(nameof(PersonalizedToastComponent.Title), message);

        ToastService.ShowToast<PersonalizedToastComponent>(_IndividualtoastParameters, settings => { settings.Position = position; });
    }
    private void OnShowHtml()
    {
        RenderFragment message =@<text>I'm an <em>INFO</em> message with some <strong>bold</strong> text</text>;
        ToastService.ShowToast(message, ToastLevel.Info);
    }

    private void ClearAll()
        => ToastService.ClearAll();

    private void ClearWarnings()
        => ToastService.ClearToasts(ToastLevel.Warning);

    private void ClearInfos()
        => ToastService.ClearInfoToasts();

    private void ClearCustom()
        => ToastService.ClearCustomToasts();

    private void ClearQueue()
        => ToastService.ClearQueue();

    private void ClearQueueWarnings()
        => ToastService.ClearQueueToasts(ToastLevel.Warning);

    private void ClearQueueInfos()
        => ToastService.ClearQueueInfoToasts();
}